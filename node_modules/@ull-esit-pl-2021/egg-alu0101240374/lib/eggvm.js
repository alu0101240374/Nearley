let insp = require("util").inspect;
let ins = (x) => insp(x, {depth: null});
const {Value, Word, Apply, MethodApply, RegExp, json2Ast, j2a} = require('./ast.js');
let fs = require("fs");
let monkeyPatch = require('./monkey-patch.js');

let specialForms = Object.create(null); // new Map;

specialForms['if'] = function(args, env) {
  if (args.length != 3) {
    throw new SyntaxError('Bad number of args to if');
  }

  if (args[0].evaluate(env) !== false) {
    return args[1].evaluate(env);
  } else {
    return args[2].evaluate(env);
  }
};

specialForms['while'] = function(args, env) {
  if (args.length != 2) {
    throw new SyntaxError('Bad number of args to while');
  }

  while(args[0].evaluate(env) !== false) {
    args[1].evaluate(env);
  }
  // Egg has no undefined so we return false when there's no meaningful result.
  return false;
};

specialForms['for'] = function(args, env) {
  if (args.length != 4) {
    throw new SyntaxError('Bad number of args on for loop');
  }

  for (args[0].evaluate(env); args[1].evaluate(env); args[2].evaluate(env)) {
    args[3].evaluate(env);
  }

  return false;
}

specialForms['foreach'] = function(args, env) {
  if (args.length != 3) {
    throw new SyntexError('Bad number of arguments in forEach loop');
  }

  let iteratorName = args[0].name;
  let operator = args[1].evaluate(env);
  let iterator = operator[Symbol.iterator]();
  let value;

  while (value = iterator.next().value) {
    env[iteratorName] = value;
    args[2].evaluate(env);
  }

  return false;
}

specialForms['do'] = function(args, env) {
  let value = false;

  args.forEach(function(arg) {
    //console.log(arg)
    value = arg.evaluate(env);
  });

  return value;
};

specialForms['def'] = specialForms['define'] = specialForms[':='] = 
function(args, env) {
  if (args.length != 2 || args[0].type != 'word') {
    throw new SyntaxError('Bad use of define');
  }

  let value = args[1].evaluate(env);
  env[args[0].name] = value;
  return value;
};

/**
 * do(
 *  define(substract, fun(val1, val2,
 *    -(val1,val2)
 *  )),
 * substract(4,3)
 * )
 */
specialForms['->'] = specialForms['fun'] = function(args, env) {
  if (!args.length) {
    throw new SyntaxError('Functions need a body.')
  }

  function name(expr) {
    if (expr.type != 'word') {
      throw new SyntaxError('Arg names must be words');
    }

    return expr.name;
  }

  let argNames = args.slice(0, args.length - 1).map(name);
  let body = args[args.length - 1];

  return function() {
    if (arguments.length != argNames.length) {
      throw new TypeError('Wrong number of arguments');
    }

    let localEnv = Object.create(env);
    for (let i = 0; i < arguments.length; i++) {
      localEnv[argNames[i]] = arguments[i];
    }

    return body.evaluate(localEnv);
  };
};

specialForms["set"] = specialForms['='] = function(args, env) {
  if (args[0].type != 'word') {
    throw new SyntaxError('Bad use of set');
  }

  let valName = args[0].name;
  let value = args[args.length - 1].evaluate(env); //accesing last element of array, where the value is

  for (let scope = env; scope; scope = Object.getPrototypeOf(scope)) {
    if (Object.prototype.hasOwnProperty.call(scope, valName)) {
      if (Array.isArray(scope[valName]) || scope[valName] instanceof Map || Object.keys(scope[valName]).length > 1) {
        let tempModifyingElement = scope[valName];
        let i = 1;
        for (i; i <= args.length - 2; i++) {   //accesing the multiarray indexes, we stop before the last index
          processedIndex = args[i].evaluate(env);
          if (Array.isArray(tempModifyingElement[processedIndex])) {
            tempModifyingElement = tempModifyingElement[processedIndex];
          } else if (tempModifyingElement instanceof Map && tempModifyingElement.get(processedIndex) instanceof Map) {
            tempModifyingElement = tempModifyingElement.get(processedIndex);
          } else {
            continue;
          }
        }
        if (tempModifyingElement instanceof Map) tempModifyingElement.set(processedIndex, value);
        else tempModifyingElement[processedIndex] = value;
        return value;
      } else {
        if (args.length > 2) {
          throw new TypeError(`The object '${valName}' is not indexable!`);
        } else {
          scope[valName] = value;
          return value;
        }
      }
    }
  }
  throw new ReferenceError(`Tried setting an undefined variable: ${valName}`);
};

specialForms["object"] = (args, env) => {
  if (args.length % 2 !== 0) {
    throw new Error("Invalid number of arguments in object");
  }
  const objEnv = Object.create(env);
  const obj = Object.create(objEnv);
  objEnv["self"] = obj;

  let name;
  let value;
  for (let i = 0; i < args.length; i += 2) {
    name = args[i].evaluate(obj);
    //name = tempName.substring(1, tempName.length - 1);
    value = args[i + 1].evaluate(obj);
    obj[name] = value;
  }

  return obj;
}

specialForms["require"] = function(args, env) {
  let REQUIRE = require('./egg-require.js');
  return REQUIRE.fun(args[0], env);
}

specialForms['++'] = function(value, env) {
  variableName = value[0].name;
  value = value[0].evaluate(env);
  env[variableName] = ++value;
  return value;
}

let topEnv = Object.create(null); // new Map;
topEnv['true'] = true;
topEnv['false'] = false;
topEnv["sub"] = Object.prototype.sub;

[
  '+', 
  '-', 
  '*', 
  '/', 
  '==', 
  '<', 
  '>',
  '&&',
  '||'
].forEach(op => {
  topEnv[op] = new Function('a, b', `return a ${op} b;`);
});

topEnv['print'] = function(value) {
  console.log(value);
  return value;
};

topEnv["arr"] = topEnv["array"] = function(...args) {
  return args;
};

topEnv["length"] = function(array) {
  return array.length;
};

topEnv["[]"] = topEnv["element"] = topEnv["<-"] =
function(array, ...args) {
  let tmp = array;
  for (let i = 0; i < args.length; i++) {
    if (args[i] < 0) {
      tmp = tmp[tmp.length + args[i]];
    } else {
      if (tmp instanceof Map) tmp = tmp.get(args[i]);
      else tmp = tmp[args[i]];
    }
  }
  return tmp;
};

topEnv["map"] = topEnv["dic"] = function(...args) {
  let map = new Map();
  for (let i = 0; i < args.length; i += 2) {
    map.set(args[i], args[i + 1]);
  }
  return map;
}

topEnv["RegExp"] = function(...args) {
  const XRegExp = require('xregexp');
  return XRegExp;
}

module.exports = {specialForms, topEnv};
//console.log(specialForms);
let parser = require('./parse.js');
let parse = parser.parse;

function loadPlugins(path) {
  const extendedEgg = require(path);
  specialForms = extendedEgg.specialForms;
  topEnv = extendedEgg.topEnv;
}

/**
 * Runs a program
 * @param {*} program 
 * @returns  evaluated program
 */
function run(program) {
  let env = Object.create(topEnv);
  let tree = parse(program);
  // console.log(tree.args[0].args[1])
  // console.log(program);
  // console.log(ins(tree));
  return tree.evaluate(env);
}

/**
 * Runs a program from a given file
 * @param {*} fileName 
 * @returns evaluated program
 */
function runFromFile(fileName) {
  try {
    let program = fs.readFileSync(fileName, 'utf8');
    return run(program);
  }
  catch (err) {
    console.log(err);
  }
}

/**
 * Runs a program from a compiled tree
 * @param {*} fileName 
 * @return evaluation of tree 
 */
function runFromEVM(fileName) {
  try {
    let json = fs.readFileSync(fileName, 'utf8');
    let flatTree = JSON.parse(json);
    let tree = json2Ast(flatTree);
    let env = Object.create(topEnv);
    // console.log(program);
    // console.log(ins(tree));
    return tree.evaluate(env);
  }
  catch (err) {
    console.log(err);
  }
}

module.exports = {
  run,
  runFromFile,
  runFromEVM,
  loadPlugins,
  topEnv,
  specialForms,
  parser,
  // evaluate,
};